(ns naipmoro.qrng.core
  (:require [clj-http.client :as http])
  (:require [criterium.core :as crit])
  )
(set! *warn-on-reflection* true)

(def anu-domain "qrng.anu.edu.au/API/jsonI.php")
(def ^:const maxlen 1024) ; determined by the ANU server
(def types {:int8 "uint8", :int16 "uint16", :hex16 "hex16"})

(defn quot-rem [num denom]
  [(quot num denom) (rem num denom)])

(defn qrand
  "Returns a vector of random numbers generated by
   the ANU Random Numbers Server.

   You have 3 choices for option 'type':
   :int8  an integer between 0-255   (default)
   :int16 an integer between 0-65535
   :hex16 a hexadecimal string between 00-ff

   The 'blocks' option is relevant only for type
   :hex16. It sets the hexadecimal block length and
   must be a number between 1-1024. The default is 1.

   The 'length' option is the number of random numbers
   to be returned. The default is 1.

   If option 'https' is true, the connection will be
   established using the https protocol. Note, however,
   that presently the ANU server has an untrusted SSL cert.
   The default for this option is false (i.e., http)."
  [& {:keys [type length blocks https]
      :or {type   :int8     ; 
           length 1         ; the defaults
           blocks 1         ; 
           https  false}}]  ;
  {:pre [(pos? length)                        ; length > 0
         (and (> blocks 0) (< blocks 1025))]} ; 0 < blocks <= 1024
  (let [protocol (if https "https" "http")
        url (str protocol "://" anu-domain)
        base-query {"type" (type types) "size" blocks}
        base-get {:as :json}]
    (if (> length maxlen)
      (let [query-opts {:query-params (assoc base-query "length" maxlen)}
            opts (conj base-get query-opts)]
        (http/with-connection-pool {:insecure? true}
          (let [[q r] (quot-rem length maxlen)]
            (loop [q q, res []]
              (if (zero? q)
                (if (zero? r)
                  (vec res)
                  (vec (concat res (take r (:data (:body (http/get url opts)))))))
                (recur (dec q) (concat res (:data (:body (http/get url opts))))))))))
      ; elseif length <= maxlen
      (let [query-opts {:query-params (assoc base-query "length" length)}
            get-opts (if-not https base-get (assoc base-get :insecure? true))
            opts (conj get-opts query-opts)]
        (:data (:body (http/get url opts)))))))