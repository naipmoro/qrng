(ns naipmoro.qrng.core
  (:require [clj-http.client :as http])
  (:require [criterium.core :as crit])
  )
(set! *warn-on-reflection* true)

(def anu-domain "qrng.anu.edu.au/API/jsonI.php")
(def ^:const maxlen 1024) ; determined by the ANU server
(def types {:int8 "uint8", :int16 "uint16", :hex16 "hex16"})

(defn quantum-random
  "Returns a vector of random numbers generated by
   the ANU Random Number Server.
   - You have 3 choices of option 'type':
   :int8  an integer between 0-255   (default)
   :int16 an integer between 0-65535
   :hex16 a hexadecimal string between 00-ff
   - The 'block' option is relevant only for type
   :hex16. It sets the hexadecimal block length and
   must be a number between 1-1024. The default is 1.
   - The 'length' option is the number of random numbers
   to be returned. It must be a number between 1-1024.
   The default is 1.
   - If option 'https' is true, the connection will be
   made using the https protocol. Note, however, that at
   present the ANU server has an untrusted SSL cert. The
   default for this option is false (i.e., http)."
  
  [& {:keys [type length blocks https]
      :or {type   "uint8"   ; 
           length 1         ; the defaults
           blocks 1         ; 
           https  false}}]  ;
  {:pre [(pos? length) (pos? blocks)]}
  (let [protocol (if https "https" "http")
        ;domain "qrng.anu.edu.au/API/jsonI.php"
        url (str protocol "://" anu-domain)
        query-opts {:query-params {"length" length "type" type "size" blocks}}
        opts (conj {:insecure? true :as :json} query-opts)
        response (http/get url opts)
        body (:body response)
        ]
    (:data (:body (http/get url opts)))
    ))



(defn quot-rem [num denom]
  [(quot num denom) (rem num denom)])

(defn qrand
  [& {:keys [type length blocks https]
      :or {type   "uint8"   ; 
           length 1         ; the defaults
           blocks 1         ; 
           https  false}}]  ;
  {:pre [(pos? length) (pos? blocks)]}
  (let [protocol (if https "https" "http")
        url (str protocol "://" anu-domain)
        query-opts {:query-params {"length" maxlen "type" type "size" blocks}}
        opts (conj {:as :json} query-opts)
       ; response (http/get url opts)
       ; body (:body response)
        ]
    (http/with-connection-pool {:insecure? true}
      (let [[q r] (quot-rem length 1024)]
        (loop [q q, res []]
          (if (zero? q)
            (if (zero? r)
              (vec res)
              (vec (concat res (take r (:data (:body (http/get url opts)))))))
            (recur (dec q) (concat res (:data (:body (http/get url opts)))))))))
  

    ))



(defn qurand
  [& {:keys [type length blocks https]
      :or {type   :int8     ; 
           length 1         ; the defaults
           blocks 1         ; 
           https  false}}]  ;
  {:pre [(pos? length) (pos? blocks)]} ; length & blocks must be > 0
  (let [protocol (if https "https" "http")
        url (str protocol "://" anu-domain)
        base-query {"type" (type types) "size" blocks}
        base-get {:as :json}]
    (if (> length maxlen)
      (let [query-opts {:query-params (assoc base-query "length" maxlen)}
            opts (conj base-get query-opts)]
        (http/with-connection-pool {:insecure? true}
          (let [[q r] (quot-rem length maxlen)]
            (loop [q q, res []]
              (if (zero? q)
                (if (zero? r)
                  (vec res)
                  (vec (concat res (take r (:data (:body (http/get url opts)))))))
                (recur (dec q) (concat res (:data (:body (http/get url opts))))))))))
      ; elseif length <= maxlen
      (let [query-opts {:query-params (assoc base-query "length" length)}
            get-opts (if-not https base-get (assoc base-get :insecure? true))
            opts (conj get-opts query-opts)]
        (:data (:body (http/get url opts)))))))